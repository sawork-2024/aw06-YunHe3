openapi: 3.0.3
info:
  title: MicroPos
  description: Microservice WebPos
  version: 1.0.0
servers:
  - url: 'http://localhost:8080/api'
paths:
  /products:
    get:
      summary: List all products
      operationId: listProducts
      tags:
        - products
      responses:
        '200':
          description: An array of products
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /products/{productId}:
    get:
      summary: Info for a specific product
      operationId: getProductById
      tags:
        - product
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"

  /carts:
    get:
      summary: List all carts
      operationId: listCarts
      tags:
        - carts
      responses:
        '200':
          description: An array of carts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Carts"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - carts
      operationId: createCart
      summary: Create a new cart
      requestBody:
        description: An empty cart
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
        required: true
      responses:
        '201':
          description: The cart was successfully added.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: Cart not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /carts/{cartId}:
    get:
      summary: Info for a specific Cart
      operationId: getCartById
      tags:
        - cart
      parameters:
        - name: cartId
          in: path
          required: true
          description: The id of the cart to retrieve
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
    post:
      summary: Add an item to cart
      operationId: addItemToCart
      tags:
        - cart
      parameters:
        - name: cartId
          in: path
          required: true
          description: The id of the cart to retrieve
          schema:
            type: integer
            format: int32
      requestBody:
        description: The details of the item.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItem"
        required: true
      responses:
        '200':
          description: The item was successfully added.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /carts/{cartId}/total:
    get:
      summary: Total for a specific cart
      operationId: getCartTotal
      tags:
        - cart
      parameters:
        - name: cartId
          in: path
          required: true
          description: The id of the cart to get total
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: expected response to a valid request
          content:
            application/json:
              schema:
                type: number
                format: double
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /checkout:
    post:
      summary: checkout a cart
      operationId: checkout
      tags:
        - counter
      requestBody:
        description: The cart to checkout
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: number
                format: double
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Carts:
      type: array
      items:
        $ref: "#/components/schemas/Cart"

    Cart:
      type: object
      properties:
        id:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/CartItem"

    CartItem:
      type: object
      properties:
        id:
          type: integer
          format: int32
        amount:
          type: integer
          format: int32
        product:
          $ref: "#/components/schemas/Product"

    Products:
      type: array
      items:
        $ref: "#/components/schemas/Product"

    Product:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        name:
          type: string
        price:
          type: number
          format: double
        img:
          type: string

    Error:
      type: object
      required:
        - code
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string













