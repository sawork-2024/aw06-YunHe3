/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.micropos.api;

import com.micropos.model.CartDto;
import com.micropos.model.CartItemDto;
import com.micropos.model.ErrorDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-14T18:40:21.838381+08:00[Asia/Shanghai]")
@Validated
@Api(value = "carts", description = "the carts API")
public interface CartsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /carts/{cartId} : Add an item to cart
     *
     * @param cartId The id of the cart to retrieve (required)
     * @param cartItemDto The details of the item. (required)
     * @return The item was successfully added. (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Add an item to cart", nickname = "addItemToCart", notes = "", response = CartDto.class, tags={ "cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The item was successfully added.", response = CartDto.class),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/carts/{cartId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CartDto> addItemToCart(@ApiParam(value = "The id of the cart to retrieve", required = true) @PathVariable("cartId") Integer cartId,@ApiParam(value = "The details of the item.", required = true) @Valid @RequestBody CartItemDto cartItemDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0, \"items\" : [ { \"amount\" : 1, \"product\" : { \"img\" : \"img\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"id\" : 6 }, { \"amount\" : 1, \"product\" : { \"img\" : \"img\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"id\" : 6 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /carts : Create a new cart
     *
     * @param cartDto An empty cart (required)
     * @return The cart was successfully added. (status code 201)
     *         or Bad request (status code 400)
     *         or Cart not found (status code 404)
     */
    @ApiOperation(value = "Create a new cart", nickname = "createCart", notes = "", response = CartDto.class, tags={ "carts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The cart was successfully added.", response = CartDto.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Cart not found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/carts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CartDto> createCart(@ApiParam(value = "An empty cart", required = true) @Valid @RequestBody CartDto cartDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0, \"items\" : [ { \"amount\" : 1, \"product\" : { \"img\" : \"img\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"id\" : 6 }, { \"amount\" : 1, \"product\" : { \"img\" : \"img\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"id\" : 6 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /carts/{cartId} : Info for a specific Cart
     *
     * @param cartId The id of the cart to retrieve (required)
     * @return Expected response to a valid request (status code 200)
     */
    @ApiOperation(value = "Info for a specific Cart", nickname = "getCartById", notes = "", response = CartDto.class, tags={ "cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Expected response to a valid request", response = CartDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/carts/{cartId}",
        produces = { "application/json" }
    )
    default ResponseEntity<CartDto> getCartById(@ApiParam(value = "The id of the cart to retrieve", required = true) @PathVariable("cartId") Integer cartId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0, \"items\" : [ { \"amount\" : 1, \"product\" : { \"img\" : \"img\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"id\" : 6 }, { \"amount\" : 1, \"product\" : { \"img\" : \"img\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"id\" : 6 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /carts/{cartId}/total : Total for a specific cart
     *
     * @param cartId The id of the cart to get total (required)
     * @return expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Total for a specific cart", nickname = "getCartTotal", notes = "", response = Double.class, tags={ "cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "expected response to a valid request", response = Double.class),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/carts/{cartId}/total",
        produces = { "application/json" }
    )
    default ResponseEntity<Double> getCartTotal(@ApiParam(value = "The id of the cart to get total", required = true) @PathVariable("cartId") Integer cartId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /carts : List all carts
     *
     * @return An array of carts (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "List all carts", nickname = "listCarts", notes = "", response = CartDto.class, responseContainer = "List", tags={ "carts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "An array of carts", response = CartDto.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "unexpected error", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/carts",
        produces = { "application/json" }
    )
    default ResponseEntity<List<CartDto>> listCarts() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0, \"items\" : [ { \"amount\" : 1, \"product\" : { \"img\" : \"img\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"id\" : 6 }, { \"amount\" : 1, \"product\" : { \"img\" : \"img\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, \"id\" : 6 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
